{"ast":null,"code":"export const sortStocksByDividendYield = stocks => {\n  const stocksCopy = [...stocks];\n  const year = getCurrentYear();\n  const sorted = stocksCopy.sort((stockA, stockB) => {\n    return stockB.dividends[year] - stockA.dividends[year];\n  });\n  return sorted;\n};\nexport const sortStocksByCompoundedYield = stocks => {\n  return sortStocks(stocks, calculateTotalDividends);\n};\nexport const sortStocksByYieldGrowth = stocks => {\n  return sortStocks(stocks, calculateGrowth);\n};\nexport const sortStocksByDividendPayoutValue = stocks => {\n  return sortStocks(stocks, calculateDividendPayoutValue);\n};\nexport const sortStocksByAggregatedDividend = (stocks, callback) => {\n  return sortStocks(stocks, callback);\n};\nconst sortStocks = (stocks, sortingValueFunc) => {\n  const stocksCopy = [...stocks];\n  const sortedByValue = stocksCopy.sort((stockA, stockB) => {\n    const stockASortingValue = sortingValueFunc(stockA);\n    const stockBSortingValue = sortingValueFunc(stockB);\n    if (stockBSortingValue > stockASortingValue) {\n      return 1;\n    } else if (stockBSortingValue < stockASortingValue) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedByValue;\n};\nexport const getCurrentYear = () => {\n  const date = new Date();\n  const year = date.getFullYear();\n  return year;\n};\nexport const calculateTotalDividends = stock => {\n  let total = 0;\n  Object.keys(stock.dividends).forEach(key => {\n    total += stock.dividends[key];\n  });\n  return total;\n};\nexport const calculateGrowth = stock => {\n  const year = getCurrentYear();\n  const comparisonYear = year - 3;\n  const total = stock.dividends[year] - stock.dividends[comparisonYear];\n  return total;\n};\nexport const growingDividends = dividends => {\n  const dividendKeys = Object.keys(dividends);\n  const comparisons = [];\n  if (dividendKeys.length < 3) return false;\n  dividendKeys.reverse().slice(0, 3).forEach((key, index) => {\n    const firstItem = dividends[key];\n    const comparisonItem = dividends[dividendKeys[index + 1]];\n    if (index >= 3) {\n      return;\n    }\n    if (firstItem > comparisonItem) {\n      comparisons.push(true);\n    }\n  });\n  if (comparisons.length === 3) {\n    return true;\n  }\n  return false;\n};\nexport const consistentDividends = dividends => {\n  const upperYearBoundry = getCurrentYear();\n  const lowerYearBoundry = upperYearBoundry - 20;\n  const treshold = 15;\n  const results = new Set();\n  Object.keys(dividends).map(item => +item).forEach(item => {\n    if (item <= upperYearBoundry && item >= lowerYearBoundry) {\n      results.add(item);\n    }\n  });\n  if (results.size >= treshold) {\n    return [true, results];\n  }\n  return [false, results];\n};\nconst calculateDividendPayoutValue = stock => {\n  const year = getCurrentYear();\n  const dividend = stock.dividends[year];\n  const total = dividend * (1000 / stock.ask);\n  return total;\n};","map":{"version":3,"names":["sortStocksByDividendYield","stocks","stocksCopy","year","getCurrentYear","sorted","sort","stockA","stockB","dividends","sortStocksByCompoundedYield","sortStocks","calculateTotalDividends","sortStocksByYieldGrowth","calculateGrowth","sortStocksByDividendPayoutValue","calculateDividendPayoutValue","sortStocksByAggregatedDividend","callback","sortingValueFunc","sortedByValue","stockASortingValue","stockBSortingValue","date","Date","getFullYear","stock","total","Object","keys","forEach","key","comparisonYear","growingDividends","dividendKeys","comparisons","length","reverse","slice","index","firstItem","comparisonItem","push","consistentDividends","upperYearBoundry","lowerYearBoundry","treshold","results","Set","map","item","add","size","dividend","ask"],"sources":["E:/New folder (6)/shtock/Deriv-App/src/helpers.js"],"sourcesContent":["export const sortStocksByDividendYield = (stocks) => {\r\n  const stocksCopy = [...stocks];\r\n  const year = getCurrentYear();\r\n\r\n  const sorted = stocksCopy.sort((stockA, stockB) => {\r\n    return stockB.dividends[year] - stockA.dividends[year];\r\n  });\r\n\r\n  return sorted;\r\n};\r\n\r\nexport const sortStocksByCompoundedYield = (stocks) => {\r\n  return sortStocks(stocks, calculateTotalDividends);\r\n};\r\n\r\nexport const sortStocksByYieldGrowth = (stocks) => {\r\n  return sortStocks(stocks, calculateGrowth);\r\n};\r\n\r\nexport const sortStocksByDividendPayoutValue = (stocks) => {\r\n  return sortStocks(stocks, calculateDividendPayoutValue);\r\n};\r\n\r\nexport const sortStocksByAggregatedDividend = (stocks, callback) => {\r\n  return sortStocks(stocks, callback);\r\n};\r\n\r\nconst sortStocks = (stocks, sortingValueFunc) => {\r\n  const stocksCopy = [...stocks];\r\n\r\n  const sortedByValue = stocksCopy.sort((stockA, stockB) => {\r\n    const stockASortingValue = sortingValueFunc(stockA);\r\n    const stockBSortingValue = sortingValueFunc(stockB);\r\n\r\n    if (stockBSortingValue > stockASortingValue) {\r\n      return 1;\r\n    } else if (stockBSortingValue < stockASortingValue) {\r\n      return -1;\r\n    }\r\n\r\n    return 0;\r\n  });\r\n\r\n  return sortedByValue;\r\n};\r\n\r\nexport const getCurrentYear = () => {\r\n  const date = new Date();\r\n  const year = date.getFullYear();\r\n\r\n  return year;\r\n};\r\n\r\nexport const calculateTotalDividends = (stock) => {\r\n  let total = 0;\r\n  Object.keys(stock.dividends).forEach((key) => {\r\n    total += stock.dividends[key];\r\n  });\r\n\r\n  return total;\r\n};\r\n\r\nexport const calculateGrowth = (stock) => {\r\n  const year = getCurrentYear();\r\n  const comparisonYear = year - 3;\r\n\r\n  const total = stock.dividends[year] - stock.dividends[comparisonYear];\r\n  return total;\r\n};\r\n\r\nexport const growingDividends = (dividends) => {\r\n  const dividendKeys = Object.keys(dividends);\r\n  const comparisons = [];\r\n\r\n  if (dividendKeys.length < 3) return false;\r\n\r\n  dividendKeys\r\n    .reverse()\r\n    .slice(0, 3)\r\n    .forEach((key, index) => {\r\n      const firstItem = dividends[key];\r\n      const comparisonItem = dividends[dividendKeys[index + 1]];\r\n\r\n      if (index >= 3) {\r\n        return;\r\n      }\r\n\r\n      if (firstItem > comparisonItem) {\r\n        comparisons.push(true);\r\n      }\r\n    });\r\n\r\n  if (comparisons.length === 3) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const consistentDividends = (dividends) => {\r\n  const upperYearBoundry = getCurrentYear();\r\n  const lowerYearBoundry = upperYearBoundry - 20;\r\n  const treshold = 15;\r\n\r\n  const results = new Set();\r\n\r\n  Object.keys(dividends)\r\n    .map((item) => +item)\r\n    .forEach((item) => {\r\n      if (item <= upperYearBoundry && item >= lowerYearBoundry) {\r\n        results.add(item);\r\n      }\r\n    });\r\n\r\n  if (results.size >= treshold) {\r\n    return [true, results];\r\n  }\r\n  return [false, results];\r\n};\r\n\r\nconst calculateDividendPayoutValue = (stock) => {\r\n  const year = getCurrentYear();\r\n  const dividend = stock.dividends[year];\r\n\r\n  const total = dividend * (1000 / stock.ask);\r\n  return total;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,yBAAyB,GAAIC,MAAM,IAAK;EACnD,MAAMC,UAAU,GAAG,CAAC,GAAGD,MAAM,CAAC;EAC9B,MAAME,IAAI,GAAGC,cAAc,EAAE;EAE7B,MAAMC,MAAM,GAAGH,UAAU,CAACI,IAAI,CAAC,CAACC,MAAM,EAAEC,MAAM,KAAK;IACjD,OAAOA,MAAM,CAACC,SAAS,CAACN,IAAI,CAAC,GAAGI,MAAM,CAACE,SAAS,CAACN,IAAI,CAAC;EACxD,CAAC,CAAC;EAEF,OAAOE,MAAM;AACf,CAAC;AAED,OAAO,MAAMK,2BAA2B,GAAIT,MAAM,IAAK;EACrD,OAAOU,UAAU,CAACV,MAAM,EAAEW,uBAAuB,CAAC;AACpD,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAIZ,MAAM,IAAK;EACjD,OAAOU,UAAU,CAACV,MAAM,EAAEa,eAAe,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMC,+BAA+B,GAAId,MAAM,IAAK;EACzD,OAAOU,UAAU,CAACV,MAAM,EAAEe,4BAA4B,CAAC;AACzD,CAAC;AAED,OAAO,MAAMC,8BAA8B,GAAGA,CAAChB,MAAM,EAAEiB,QAAQ,KAAK;EAClE,OAAOP,UAAU,CAACV,MAAM,EAAEiB,QAAQ,CAAC;AACrC,CAAC;AAED,MAAMP,UAAU,GAAGA,CAACV,MAAM,EAAEkB,gBAAgB,KAAK;EAC/C,MAAMjB,UAAU,GAAG,CAAC,GAAGD,MAAM,CAAC;EAE9B,MAAMmB,aAAa,GAAGlB,UAAU,CAACI,IAAI,CAAC,CAACC,MAAM,EAAEC,MAAM,KAAK;IACxD,MAAMa,kBAAkB,GAAGF,gBAAgB,CAACZ,MAAM,CAAC;IACnD,MAAMe,kBAAkB,GAAGH,gBAAgB,CAACX,MAAM,CAAC;IAEnD,IAAIc,kBAAkB,GAAGD,kBAAkB,EAAE;MAC3C,OAAO,CAAC;IACV,CAAC,MAAM,IAAIC,kBAAkB,GAAGD,kBAAkB,EAAE;MAClD,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,CAAC;EACV,CAAC,CAAC;EAEF,OAAOD,aAAa;AACtB,CAAC;AAED,OAAO,MAAMhB,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMmB,IAAI,GAAG,IAAIC,IAAI,EAAE;EACvB,MAAMrB,IAAI,GAAGoB,IAAI,CAACE,WAAW,EAAE;EAE/B,OAAOtB,IAAI;AACb,CAAC;AAED,OAAO,MAAMS,uBAAuB,GAAIc,KAAK,IAAK;EAChD,IAAIC,KAAK,GAAG,CAAC;EACbC,MAAM,CAACC,IAAI,CAACH,KAAK,CAACjB,SAAS,CAAC,CAACqB,OAAO,CAAEC,GAAG,IAAK;IAC5CJ,KAAK,IAAID,KAAK,CAACjB,SAAS,CAACsB,GAAG,CAAC;EAC/B,CAAC,CAAC;EAEF,OAAOJ,KAAK;AACd,CAAC;AAED,OAAO,MAAMb,eAAe,GAAIY,KAAK,IAAK;EACxC,MAAMvB,IAAI,GAAGC,cAAc,EAAE;EAC7B,MAAM4B,cAAc,GAAG7B,IAAI,GAAG,CAAC;EAE/B,MAAMwB,KAAK,GAAGD,KAAK,CAACjB,SAAS,CAACN,IAAI,CAAC,GAAGuB,KAAK,CAACjB,SAAS,CAACuB,cAAc,CAAC;EACrE,OAAOL,KAAK;AACd,CAAC;AAED,OAAO,MAAMM,gBAAgB,GAAIxB,SAAS,IAAK;EAC7C,MAAMyB,YAAY,GAAGN,MAAM,CAACC,IAAI,CAACpB,SAAS,CAAC;EAC3C,MAAM0B,WAAW,GAAG,EAAE;EAEtB,IAAID,YAAY,CAACE,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK;EAEzCF,YAAY,CACTG,OAAO,EAAE,CACTC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXR,OAAO,CAAC,CAACC,GAAG,EAAEQ,KAAK,KAAK;IACvB,MAAMC,SAAS,GAAG/B,SAAS,CAACsB,GAAG,CAAC;IAChC,MAAMU,cAAc,GAAGhC,SAAS,CAACyB,YAAY,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC;IAEzD,IAAIA,KAAK,IAAI,CAAC,EAAE;MACd;IACF;IAEA,IAAIC,SAAS,GAAGC,cAAc,EAAE;MAC9BN,WAAW,CAACO,IAAI,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,CAAC;EAEJ,IAAIP,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;IAC5B,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAMO,mBAAmB,GAAIlC,SAAS,IAAK;EAChD,MAAMmC,gBAAgB,GAAGxC,cAAc,EAAE;EACzC,MAAMyC,gBAAgB,GAAGD,gBAAgB,GAAG,EAAE;EAC9C,MAAME,QAAQ,GAAG,EAAE;EAEnB,MAAMC,OAAO,GAAG,IAAIC,GAAG,EAAE;EAEzBpB,MAAM,CAACC,IAAI,CAACpB,SAAS,CAAC,CACnBwC,GAAG,CAAEC,IAAI,IAAK,CAACA,IAAI,CAAC,CACpBpB,OAAO,CAAEoB,IAAI,IAAK;IACjB,IAAIA,IAAI,IAAIN,gBAAgB,IAAIM,IAAI,IAAIL,gBAAgB,EAAE;MACxDE,OAAO,CAACI,GAAG,CAACD,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;EAEJ,IAAIH,OAAO,CAACK,IAAI,IAAIN,QAAQ,EAAE;IAC5B,OAAO,CAAC,IAAI,EAAEC,OAAO,CAAC;EACxB;EACA,OAAO,CAAC,KAAK,EAAEA,OAAO,CAAC;AACzB,CAAC;AAED,MAAM/B,4BAA4B,GAAIU,KAAK,IAAK;EAC9C,MAAMvB,IAAI,GAAGC,cAAc,EAAE;EAC7B,MAAMiD,QAAQ,GAAG3B,KAAK,CAACjB,SAAS,CAACN,IAAI,CAAC;EAEtC,MAAMwB,KAAK,GAAG0B,QAAQ,IAAI,IAAI,GAAG3B,KAAK,CAAC4B,GAAG,CAAC;EAC3C,OAAO3B,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module"}