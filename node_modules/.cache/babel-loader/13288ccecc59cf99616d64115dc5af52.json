{"ast":null,"code":"import { getCurrentYear, sortStocksByDividendYield, sortStocksByCompoundedYield, sortStocksByYieldGrowth, calculateTotalDividends, calculateGrowth } from \"../../helpers\";\nexport const getTopFiveDividendStocks = stocks => {\n  const sorted = sortStocksByDividendYield(stocks);\n  const year = getCurrentYear();\n  if (sorted.length === 0) return [];\n  return sorted.slice(0, 5).map(stock => {\n    return {\n      ticker: stock.ticker,\n      name: stock.name,\n      amount: stock.dividends[year]\n    };\n  });\n};\nexport const getInfoCardData = (descriptor, stocks) => {\n  if (descriptor === \"growth\") {\n    return calculateDividendGrowthStock(stocks);\n  } else if (descriptor === \"yieldcurrent\") {\n    return calculateDividendStockCurrentYear(stocks);\n  } else if (descriptor === \"yieldcompounded\") {\n    return calculateDividendStockCompounded(stocks);\n  }\n};\nconst calculateDividendStockCurrentYear = stocks => {\n  const sorted = sortStocksByDividendYield(stocks);\n  const year = getCurrentYear();\n  if (sorted.length === 0) return {};\n  return {\n    ticker: sorted[0].ticker,\n    amount: sorted[0].dividends[year]\n  };\n};\nexport const calculateDividendStockCompounded = stocks => {\n  const sortedByCompoundedYield = sortStocksByCompoundedYield(stocks);\n  if (sortedByCompoundedYield.length === 0) return {};\n  return {\n    ticker: sortedByCompoundedYield[0].ticker,\n    amount: calculateTotalDividends(sortedByCompoundedYield[0])\n  };\n};\nconst calculateDividendGrowthStock = stocks => {\n  const sortedByGrowth = sortStocksByYieldGrowth(stocks);\n  if (sortedByGrowth.length === 0) return {};\n  return {\n    ticker: sortedByGrowth[0].ticker,\n    amount: calculateGrowth(sortedByGrowth[0])\n  };\n};","map":{"version":3,"names":["getCurrentYear","sortStocksByDividendYield","sortStocksByCompoundedYield","sortStocksByYieldGrowth","calculateTotalDividends","calculateGrowth","getTopFiveDividendStocks","stocks","sorted","year","length","slice","map","stock","ticker","name","amount","dividends","getInfoCardData","descriptor","calculateDividendGrowthStock","calculateDividendStockCurrentYear","calculateDividendStockCompounded","sortedByCompoundedYield","sortedByGrowth"],"sources":["E:/New folder (6)/shtock/src/pages/Dashboard/helpers.js"],"sourcesContent":["import {\r\n  getCurrentYear,\r\n  sortStocksByDividendYield,\r\n  sortStocksByCompoundedYield,\r\n  sortStocksByYieldGrowth,\r\n  calculateTotalDividends,\r\n  calculateGrowth,\r\n} from \"../../helpers\";\r\n\r\nexport const getTopFiveDividendStocks = (stocks) => {\r\n  const sorted = sortStocksByDividendYield(stocks);\r\n  const year = getCurrentYear();\r\n\r\n  if (sorted.length === 0) return [];\r\n\r\n  return sorted.slice(0, 5).map((stock) => {\r\n    return {\r\n      ticker: stock.ticker,\r\n      name: stock.name,\r\n      amount: stock.dividends[year],\r\n    };\r\n  });\r\n};\r\n\r\nexport const getInfoCardData = (descriptor, stocks) => {\r\n  if (descriptor === \"growth\") {\r\n    return calculateDividendGrowthStock(stocks);\r\n  } else if (descriptor === \"yieldcurrent\") {\r\n    return calculateDividendStockCurrentYear(stocks);\r\n  } else if (descriptor === \"yieldcompounded\") {\r\n    return calculateDividendStockCompounded(stocks);\r\n  }\r\n};\r\n\r\nconst calculateDividendStockCurrentYear = (stocks) => {\r\n  const sorted = sortStocksByDividendYield(stocks);\r\n  const year = getCurrentYear();\r\n\r\n  if (sorted.length === 0) return {};\r\n\r\n  return {\r\n    ticker: sorted[0].ticker,\r\n    amount: sorted[0].dividends[year],\r\n  };\r\n};\r\n\r\nexport const calculateDividendStockCompounded = (stocks) => {\r\n  const sortedByCompoundedYield = sortStocksByCompoundedYield(stocks);\r\n\r\n  if (sortedByCompoundedYield.length === 0) return {};\r\n\r\n  return {\r\n    ticker: sortedByCompoundedYield[0].ticker,\r\n    amount: calculateTotalDividends(sortedByCompoundedYield[0]),\r\n  };\r\n};\r\n\r\nconst calculateDividendGrowthStock = (stocks) => {\r\n  const sortedByGrowth = sortStocksByYieldGrowth(stocks);\r\n\r\n  if (sortedByGrowth.length === 0) return {};\r\n\r\n  return {\r\n    ticker: sortedByGrowth[0].ticker,\r\n    amount: calculateGrowth(sortedByGrowth[0]),\r\n  };\r\n};\r\n"],"mappings":"AAAA,SACEA,cAAc,EACdC,yBAAyB,EACzBC,2BAA2B,EAC3BC,uBAAuB,EACvBC,uBAAuB,EACvBC,eAAe,QACV,eAAe;AAEtB,OAAO,MAAMC,wBAAwB,GAAIC,MAAM,IAAK;EAClD,MAAMC,MAAM,GAAGP,yBAAyB,CAACM,MAAM,CAAC;EAChD,MAAME,IAAI,GAAGT,cAAc,EAAE;EAE7B,IAAIQ,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EAElC,OAAOF,MAAM,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,KAAK,IAAK;IACvC,OAAO;MACLC,MAAM,EAAED,KAAK,CAACC,MAAM;MACpBC,IAAI,EAAEF,KAAK,CAACE,IAAI;MAChBC,MAAM,EAAEH,KAAK,CAACI,SAAS,CAACR,IAAI;IAC9B,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMS,eAAe,GAAGA,CAACC,UAAU,EAAEZ,MAAM,KAAK;EACrD,IAAIY,UAAU,KAAK,QAAQ,EAAE;IAC3B,OAAOC,4BAA4B,CAACb,MAAM,CAAC;EAC7C,CAAC,MAAM,IAAIY,UAAU,KAAK,cAAc,EAAE;IACxC,OAAOE,iCAAiC,CAACd,MAAM,CAAC;EAClD,CAAC,MAAM,IAAIY,UAAU,KAAK,iBAAiB,EAAE;IAC3C,OAAOG,gCAAgC,CAACf,MAAM,CAAC;EACjD;AACF,CAAC;AAED,MAAMc,iCAAiC,GAAId,MAAM,IAAK;EACpD,MAAMC,MAAM,GAAGP,yBAAyB,CAACM,MAAM,CAAC;EAChD,MAAME,IAAI,GAAGT,cAAc,EAAE;EAE7B,IAAIQ,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;EAElC,OAAO;IACLI,MAAM,EAAEN,MAAM,CAAC,CAAC,CAAC,CAACM,MAAM;IACxBE,MAAM,EAAER,MAAM,CAAC,CAAC,CAAC,CAACS,SAAS,CAACR,IAAI;EAClC,CAAC;AACH,CAAC;AAED,OAAO,MAAMa,gCAAgC,GAAIf,MAAM,IAAK;EAC1D,MAAMgB,uBAAuB,GAAGrB,2BAA2B,CAACK,MAAM,CAAC;EAEnE,IAAIgB,uBAAuB,CAACb,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;EAEnD,OAAO;IACLI,MAAM,EAAES,uBAAuB,CAAC,CAAC,CAAC,CAACT,MAAM;IACzCE,MAAM,EAAEZ,uBAAuB,CAACmB,uBAAuB,CAAC,CAAC,CAAC;EAC5D,CAAC;AACH,CAAC;AAED,MAAMH,4BAA4B,GAAIb,MAAM,IAAK;EAC/C,MAAMiB,cAAc,GAAGrB,uBAAuB,CAACI,MAAM,CAAC;EAEtD,IAAIiB,cAAc,CAACd,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;EAE1C,OAAO;IACLI,MAAM,EAAEU,cAAc,CAAC,CAAC,CAAC,CAACV,MAAM;IAChCE,MAAM,EAAEX,eAAe,CAACmB,cAAc,CAAC,CAAC,CAAC;EAC3C,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}