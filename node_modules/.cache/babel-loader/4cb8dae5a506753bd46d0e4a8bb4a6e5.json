{"ast":null,"code":"var _jsxFileName = \"E:\\\\New folder (6)\\\\shtock\\\\src\\\\components\\\\AggregatedDividend\\\\AggregatedDividend.jsx\";\nimport React, { useState } from \"react\";\nimport Select from \"../Select/Select\";\nimport { getCurrentYear, sortStocksByAggregatedDividend } from \"../../helpers\";\nimport styles from \"./AggregatedDividend.module.css\";\nconst AggregatedDividend = _ref => {\n  let {\n    stocks,\n    stock\n  } = _ref;\n  const [years, setYears] = useState(20);\n  const options = [{\n    value: 20,\n    displayValue: \"20 years\"\n  }, {\n    value: 15,\n    displayValue: \"15 years\"\n  }, {\n    value: 10,\n    displayValue: \"10 years\"\n  }, {\n    value: 5,\n    displayValue: \"5 years\"\n  }];\n  const onChange = e => {\n    const years = e.target.value;\n    setYears(years);\n  };\n  const getValidKeys = () => {\n    const upperTreshold = getCurrentYear();\n    const lowerTreshold = upperTreshold - years;\n    const keysWithinTresholdBoundries = Object.keys(stock.dividends).filter(key => {\n      const convertedToNumber = +key;\n      if (convertedToNumber <= upperTreshold && convertedToNumber >= lowerTreshold) {\n        return true;\n      }\n      return false;\n    });\n    return keysWithinTresholdBoundries;\n  };\n  const calculateTotalDividends = (keys, dividends) => {\n    let total = 0;\n    keys.forEach(key => {\n      if (dividends[key]) {\n        total += dividends[key];\n      }\n    });\n    return total;\n  };\n  const getAverage = dividends => {\n    const validKeys = getValidKeys(dividends);\n    const aggregatedDividends = calculateTotalDividends(validKeys, dividends);\n    return (aggregatedDividends / validKeys.length).toFixed(2);\n  };\n  const getTotalDividendPerStock = stock => {\n    const validKeys = getValidKeys(stock.dividends);\n    const total = calculateTotalDividends(validKeys, stock.dividends);\n    return total;\n  };\n  const getAggregateRanking = (stocks, ticker) => {\n    let ranking;\n    const sorted = sortStocksByAggregatedDividend(stocks, getTotalDividendPerStock);\n    sorted.forEach((stockItem, index) => {\n      if (stockItem.ticker === ticker) {\n        ranking = index + 1;\n      }\n    });\n    return ranking;\n  };\n  const ranking = getAggregateRanking(stocks, stock.ticker);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: styles.aggregatedDividend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Aggregated Dividend\"), /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    className: styles.select,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"Average past \", years, \" years\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, getAverage(stock.dividends), \" NOK\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Total yield\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, getTotalDividendPerStock(stock), \" NOK\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.border,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.rankingContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Stock number \", ranking, \" in dividends per share in aggregate (\", years, \" \", \"years).\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.ranking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, ranking)));\n};\nexport default AggregatedDividend;","map":{"version":3,"names":["React","useState","Select","getCurrentYear","sortStocksByAggregatedDividend","styles","AggregatedDividend","_ref","stocks","stock","years","setYears","options","value","displayValue","onChange","e","target","getValidKeys","upperTreshold","lowerTreshold","keysWithinTresholdBoundries","Object","keys","dividends","filter","key","convertedToNumber","calculateTotalDividends","total","forEach","getAverage","validKeys","aggregatedDividends","length","toFixed","getTotalDividendPerStock","getAggregateRanking","ticker","ranking","sorted","stockItem","index","createElement","className","aggregatedDividend","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","header","heading","select","container","border","rankingContainer"],"sources":["E:/New folder (6)/shtock/src/components/AggregatedDividend/AggregatedDividend.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport Select from \"../Select/Select\";\r\n\r\nimport { getCurrentYear, sortStocksByAggregatedDividend } from \"../../helpers\";\r\n\r\nimport styles from \"./AggregatedDividend.module.css\";\r\n\r\nconst AggregatedDividend = ({ stocks, stock }) => {\r\n  const [years, setYears] = useState(20);\r\n  const options = [\r\n    { value: 20, displayValue: \"20 years\" },\r\n    { value: 15, displayValue: \"15 years\" },\r\n    {\r\n      value: 10,\r\n      displayValue: \"10 years\",\r\n    },\r\n    {\r\n      value: 5,\r\n      displayValue: \"5 years\",\r\n    },\r\n  ];\r\n\r\n  const onChange = (e) => {\r\n    const years = e.target.value;\r\n    setYears(years);\r\n  };\r\n\r\n  const getValidKeys = () => {\r\n    const upperTreshold = getCurrentYear();\r\n    const lowerTreshold = upperTreshold - years;\r\n\r\n    const keysWithinTresholdBoundries = Object.keys(stock.dividends).filter(\r\n      (key) => {\r\n        const convertedToNumber = +key;\r\n\r\n        if (\r\n          convertedToNumber <= upperTreshold &&\r\n          convertedToNumber >= lowerTreshold\r\n        ) {\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n    );\r\n    return keysWithinTresholdBoundries;\r\n  };\r\n\r\n  const calculateTotalDividends = (keys, dividends) => {\r\n    let total = 0;\r\n\r\n    keys.forEach((key) => {\r\n      if (dividends[key]) {\r\n        total += dividends[key];\r\n      }\r\n    });\r\n    return total;\r\n  };\r\n\r\n  const getAverage = (dividends) => {\r\n    const validKeys = getValidKeys(dividends);\r\n    const aggregatedDividends = calculateTotalDividends(validKeys, dividends);\r\n    return (aggregatedDividends / validKeys.length).toFixed(2);\r\n  };\r\n\r\n  const getTotalDividendPerStock = (stock) => {\r\n    const validKeys = getValidKeys(stock.dividends);\r\n    const total = calculateTotalDividends(validKeys, stock.dividends);\r\n    return total;\r\n  };\r\n\r\n  const getAggregateRanking = (stocks, ticker) => {\r\n    let ranking;\r\n    const sorted = sortStocksByAggregatedDividend(\r\n      stocks,\r\n      getTotalDividendPerStock\r\n    );\r\n\r\n    sorted.forEach((stockItem, index) => {\r\n      if (stockItem.ticker === ticker) {\r\n        ranking = index + 1;\r\n      }\r\n    });\r\n\r\n    return ranking;\r\n  };\r\n\r\n  const ranking = getAggregateRanking(stocks, stock.ticker);\r\n\r\n  return (\r\n    <section className={styles.aggregatedDividend}>\r\n      <div className={styles.header}>\r\n        <h3 className={styles.heading}>Aggregated Dividend</h3>\r\n        <Select\r\n          options={options}\r\n          className={styles.select}\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.container}>\r\n        <p>Average past {years} years</p>\r\n        <p>{getAverage(stock.dividends)} NOK</p>\r\n      </div>\r\n\r\n      <div className={styles.container}>\r\n        <p>Total yield</p>\r\n        <p>{getTotalDividendPerStock(stock)} NOK</p>\r\n      </div>\r\n\r\n      <div className={styles.border} />\r\n\r\n      <div className={styles.rankingContainer}>\r\n        <p>\r\n          Stock number {ranking} in dividends per share in aggregate ({years}{\" \"}\r\n          years).\r\n        </p>\r\n        <div className={styles.ranking}>{ranking}</div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AggregatedDividend;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}