{"ast":null,"code":"import { getCurrentYear, sortStocksByDividendPayoutValue, growingDividends, consistentDividends } from \"../../helpers\";\nexport const determineGrowingDividends = dividends => {\n  const isGrowing = growingDividends(dividends);\n  if (isGrowing) {\n    return [{\n      type: \"growingdividends\",\n      text: \"Growing dividend yields\"\n    }];\n  }\n  return [{\n    type: \"decliningdividends\",\n    text: \"Declining dividend yields\"\n  }];\n};\nexport const determineConsistentDividends = dividends => {\n  const [isConsistent, results] = consistentDividends(dividends);\n  if (isConsistent) {\n    return {\n      type: \"consistentdividends\",\n      text: `Has consistently paid out dividends in ${results.size} of 20 years.`\n    };\n  } else {\n    return {\n      type: \"inconsistentdividends\",\n      text: `Has only paid out dividends in ${results.size} of 20 years.`\n    };\n  }\n};\nexport const determineRanking = (stock, stocks) => {\n  let result = 0;\n  const sorted = sortStocksByDividendPayoutValue(stocks);\n  sorted.forEach((stockItem, index) => {\n    if (stockItem.ticker === stock.ticker) {\n      result = index + 1;\n    }\n  });\n  return [{\n    type: \"ranking\",\n    text: `Ranked ${result} stock in dividend  per\n24 hours.`\n  }];\n};","map":{"version":3,"names":["getCurrentYear","sortStocksByDividendPayoutValue","growingDividends","consistentDividends","determineGrowingDividends","dividends","isGrowing","type","text","determineConsistentDividends","isConsistent","results","size","determineRanking","stock","stocks","result","sorted","forEach","stockItem","index","ticker"],"sources":["E:/New folder (6)/shtock/src/components/Highlights/highlightshelpers.js"],"sourcesContent":["import {\r\n  getCurrentYear,\r\n  sortStocksByDividendPayoutValue,\r\n  growingDividends,\r\n  consistentDividends,\r\n} from \"../../helpers\";\r\n\r\nexport const determineGrowingDividends = (dividends) => {\r\n  const isGrowing = growingDividends(dividends);\r\n\r\n  if (isGrowing) {\r\n    return [{ type: \"growingdividends\", text: \"Growing dividend yields\" }];\r\n  }\r\n  return [\r\n    {\r\n      type: \"decliningdividends\",\r\n      text: \"Declining dividend yields\",\r\n    },\r\n  ];\r\n};\r\n\r\nexport const determineConsistentDividends = (dividends) => {\r\n  const [isConsistent, results] = consistentDividends(dividends);\r\n\r\n  if (isConsistent) {\r\n    return {\r\n      type: \"consistentdividends\",\r\n      text: `Has consistently paid out dividends in ${results.size} of 20 years.`,\r\n    };\r\n  } else {\r\n    return {\r\n      type: \"inconsistentdividends\",\r\n      text: `Has only paid out dividends in ${results.size} of 20 years.`,\r\n    };\r\n  }\r\n};\r\n\r\nexport const determineRanking = (stock, stocks) => {\r\n  let result = 0;\r\n  const sorted = sortStocksByDividendPayoutValue(stocks);\r\n\r\n  sorted.forEach((stockItem, index) => {\r\n    if (stockItem.ticker === stock.ticker) {\r\n      result = index + 1;\r\n    }\r\n  });\r\n\r\n  return [\r\n    {\r\n      type: \"ranking\",\r\n      text: `Ranked ${result} stock in dividend  per\r\n24 hours.`,\r\n    },\r\n  ];\r\n};\r\n"],"mappings":"AAAA,SACEA,cAAc,EACdC,+BAA+B,EAC/BC,gBAAgB,EAChBC,mBAAmB,QACd,eAAe;AAEtB,OAAO,MAAMC,yBAAyB,GAAIC,SAAS,IAAK;EACtD,MAAMC,SAAS,GAAGJ,gBAAgB,CAACG,SAAS,CAAC;EAE7C,IAAIC,SAAS,EAAE;IACb,OAAO,CAAC;MAAEC,IAAI,EAAE,kBAAkB;MAAEC,IAAI,EAAE;IAA0B,CAAC,CAAC;EACxE;EACA,OAAO,CACL;IACED,IAAI,EAAE,oBAAoB;IAC1BC,IAAI,EAAE;EACR,CAAC,CACF;AACH,CAAC;AAED,OAAO,MAAMC,4BAA4B,GAAIJ,SAAS,IAAK;EACzD,MAAM,CAACK,YAAY,EAAEC,OAAO,CAAC,GAAGR,mBAAmB,CAACE,SAAS,CAAC;EAE9D,IAAIK,YAAY,EAAE;IAChB,OAAO;MACLH,IAAI,EAAE,qBAAqB;MAC3BC,IAAI,EAAG,0CAAyCG,OAAO,CAACC,IAAK;IAC/D,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MACLL,IAAI,EAAE,uBAAuB;MAC7BC,IAAI,EAAG,kCAAiCG,OAAO,CAACC,IAAK;IACvD,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACjD,IAAIC,MAAM,GAAG,CAAC;EACd,MAAMC,MAAM,GAAGhB,+BAA+B,CAACc,MAAM,CAAC;EAEtDE,MAAM,CAACC,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;IACnC,IAAID,SAAS,CAACE,MAAM,KAAKP,KAAK,CAACO,MAAM,EAAE;MACrCL,MAAM,GAAGI,KAAK,GAAG,CAAC;IACpB;EACF,CAAC,CAAC;EAEF,OAAO,CACL;IACEb,IAAI,EAAE,SAAS;IACfC,IAAI,EAAG,UAASQ,MAAO;AAC7B;EACI,CAAC,CACF;AACH,CAAC"},"metadata":{},"sourceType":"module"}